libname a "C:\Users\User\Desktop\NEW";

/*1*/
data Trt;
set a.Trt;
run;

proc freq data = Trt;
where Rnd = 1;
tables TRT / nopercent out = table1;
run;
proc transpose data = table1 out = table1_trans prefix = TRT;
id TRT;
var COUNT;
run;
data table1_merge;
set table1_trans;
total = TRT1 + TRT2;
drop _LABEL_ _NAME_;
var = "Randomized set";
run;

proc freq data = Trt;
where SAFETY = 1;
tables TRT / nopercent out = table2;
run;
proc transpose data = table2 out = table2_trans prefix = TRT;
id TRT;
var COUNT;
run;
data table2_merge;
set table2_trans;
total = TRT1 + TRT2;
drop _LABEL_ _NAME_;
var = "Safety set";
run;

proc freq data = Trt;
where FAS = 1;
tables TRT / nopercent out = table3;
run;
proc transpose data = table3 out = table3_trans prefix = TRT;
id TRT;
var COUNT;
run;
data table3_merge;
set table3_trans;
total = TRT1 + TRT2;
drop _LABEL_ _NAME_;
var = "FAS set";
run;

proc freq data = Trt;
where PPS = 1;
tables TRT / nopercent out = table4;
run;
proc transpose data = table4 out = table4_trans prefix = TRT;
id TRT;
var COUNT;
run;
data table4_merge;
set table4_trans;
total = TRT1 + TRT2;
drop _LABEL_ _NAME_;
var = "PPS set";
run;


data table;
set table1_merge table2_merge table3_merge table4_merge;
percent1 = (TRT1/172)*100;
percent2 = (TRT2/172)*100;
percent_total = (total/172)*100;
run; 
proc print;run;

/*2*/
/*vs : 키, 몸무게*/
/*dm : 연령, 성별*/
/*BMI 방문2 or 방문1*/

data vs;
set a.vs;
run;

data dm;
set a.dm;
run;

data bmi_temp;
set vs;
if visit = 2 and not missing(HT) and not missing(WT);
run;
/*관측값x*/

data bmi;
set vs;
if visit = 1;
bmi = WT/(HT**2*0.0001);
run;
proc print;run;

data df;
merge Trt(in=a) dm(in=b) bmi(in=c);
by subjid;
if a = b = c;
keep subjid TRT RND AGE SEX bmi;
run;

proc means data = df n mean std median min max;
class TRT;
var age sex bmi;
run;
proc means data = df n mean std median min max;
var age sex bmi;
run;

proc freq data = df;
tables sex*trt;
run;

proc univariate data = df normal;
var age;
run;
proc ttest data = df;
class trt;
var age;
run;

proc freq data = df;
tables trt*sex / chisq;
run;

proc univariate data = df normal;
var bmi;
run;
proc npar1way  data = df wilcoxon;
class trt;
var bmi;
run;



/*3*/
data lc;
set a.lc;
run;

proc sql;
create table lc_new as
select A.*
from lc as A
inner join a.trt as B
on A.subjid = B.subjid
where B.FAS = 1;
quit;
proc print;run;

/*FAS*/
data lc_temp;
set lc_new;
where (visit = 3 or visit = 5) and LCTEST = "LDL-C";
LCORRES_num = input(LCORRES, 3.);
keep subjid visit LCTEST LCORRES_num;
run;
proc print;run;

data lc_table;
merge TRT(in=a keep = subjid TRT) lc_temp(in=b);
by subjid;
if b;
run;
proc print;run;

/*baseline, week8*/
proc means data=lc_table n mean std median min max;
  class TRT visit;
  var LCORRES_num;
run;

proc transpose data = lc_table out = lc_trans(drop = _NAME_) prefix = visit;
by subjid;
var LCORRES_num;
run;
proc print;run;

data lc_change;
merge TRT(in=a keep = subjid TRT) lc_trans(in=b);
by subjid;
if b;
change = visit2 - visit1;
rate = ((visit2 - visit1)/visit1)*100;
run;
proc print;run;

/*change*/
proc means data = lc_change n mean std median min max;
class TRT;
var change rate;
run;


/*change - ancova test*/
proc glm data = lc_change ;
class TRT;
model change  = TRT visit1;
lsmeans TRT / STDERR cl pdiff=all;
quit;

proc glm data = lc_change ;
class TRT;
model rate  = TRT visit1;
lsmeans TRT / STDERR cl pdiff=all;
quit;

proc univariate data =  lc_change normal;
var change;
run;

proc univariate normal data =  lc_change;
var rate;
run;


/* 4 */
data SS;
set trt;
where safety = 1;
run;

proc sql;
create table SS_ae as
select A.SUBJID, A.TRT, A.SAFETY, B.AESER, B.AEREL
from a.TRT as A
left join a.Ae as B
on A.SUBJID = B.SUBJID
where SAFETY = 1
;
quit;
proc print;run;

data teae;
set SS_ae;
if aeser ^= . and aerel ^= .;
run;
proc print;run;

proc freq data = teae;
table trt;
run;

proc sort data = teae out = teae_count nodupkey;
by subjid;
run;
proc print;run;
proc freq data = teae_count;
table trt;
run;


data adr;
set teae;
where aerel  ^= 4;
run;
proc freq data = adr;
table trt;
run;
proc print;run;
proc sort data = adr out = adr_count nodupkey;
by subjid;
run;
proc print;run;
proc freq data = adr_count;
table trt;
run;

data sae;
set teae;
where aeserl  ^= 7;
run;
proc freq data = sae;
table trt;
run;
proc print;run;

data count;
n1 = (19/171)*100;
n2 = (10/171)*100;
n3 = (15/171)*100;
n4 = (1/171)*100;
run;
proc print;run;


proc freq data = teae;
tables trt / binomial;
run;
proc freq data = teae;
tables trt / binomial(level = 2);
run;
proc freq data = teae;
tables trt / chisq;
run;

proc freq data = adr;
tables trt / binomial;
run;
proc freq data = adr;
tables trt / binomial(level = 2);
run;


proc freq data = teae;
tables trt*aerel / fisher;
run;
proc freq data = teae;
tables trt*aeser / fisher;
run;

